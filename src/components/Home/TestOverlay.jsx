import { useState } from "react";

export default function TestOverlay({ onClose }) {
    const tests = [
        {
            title: "–ú–∏–Ω–∏-—Ç–µ—Å—Ç ¬´–ö –∫–∞–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?¬ª",
            questions: [
                {
                    question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
                    answers: [
                        { text: "–ß—É–≤—Å—Ç–≤–∞, —Å—Ç—Ä–µ—Å—Å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è", code: "PSY" },
                        { text: "–•–æ—á—É –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏", code: "PTH" },
                        { text: "–ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", code: "PSYCH" },
                        { text: "–í–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–∏–º–Ω–æ–π –∂–∏–∑–Ω–∏", code: "SEX" },
                        { text: "–í–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤–µ—â–µ—Å—Ç–≤", code: "NAR" },
                    ],
                },
                {
                    question: "–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –º–µ—à–∞–µ—Ç –≤ –∂–∏–∑–Ω–∏?",
                    answers: [
                        { text: "–ù–µ–º–Ω–æ–≥–æ –º–µ—à–∞–µ—Ç", code: "PSY" },
                        { text: "–ú–µ—à–∞–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ/–¥–æ–º–µ", code: "PTH" },
                        { text: "–û—á–µ–Ω—å –º–µ—à–∞–µ—Ç, —Ç—è–∂–µ–ª–æ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è", code: "PSYCH" },
                        { text: "–ù–µ –∑–Ω–∞—é", code: "PSY" },
                        { text: "–ï—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", code: "NAR" },
                    ],
                },
                {
                    question: "–ß–µ–≥–æ –≤—ã –∂–¥—ë—Ç–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?",
                    answers: [
                        { text: "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è", code: "PSY" },
                        { text: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", code: "PTH" },
                        { text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", code: "PSYCH" },
                        { text: "–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–∏–º–Ω–æ–π —Å—Ñ–µ—Ä–µ", code: "SEX" },
                        { text: "–ü–æ–º–æ—â—å –≤ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤", code: "NAR" },
                    ],
                },
                {
                    question: "–ß—Ç–æ –µ—â—ë –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ —É —Å–µ–±—è?",
                    answers: [
                        { text: "–ü–ª–æ—Ö–æ–π —Å–æ–Ω, —Ç—Ä–µ–≤–æ–≥–∞, –ø–∞–Ω–∏–∫–∞", code: "PSY" },
                        { text: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", code: "PTH" },
                        { text: "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –æ–ø—ã—Ç –ø—Ä–∏—ë–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤", code: "PSYCH" },
                        { text: "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ª–∏–±–∏–¥–æ, —ç—Ä–µ–∫—Ü–∏–µ–π, –æ—Ä–≥–∞–∑–º–æ–º", code: "SEX" },
                        { text: "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–µ—à–∞–µ—Ç –∂–∏—Ç—å", code: "NAR" },
                    ],
                },
            ],
        },
    ];

    const [answers, setAnswers] = useState({});
    const [result, setResult] = useState(null);
    const [currentQuestion, setCurrentQuestion] = useState(0);

    const handleAnswer = (qIndex, code) => {
        setAnswers((prev) => ({
            ...prev,
            [qIndex]: code,
        }));

        if (qIndex < tests[0].questions.length - 1) {
            setCurrentQuestion(qIndex + 1);
        } else {
            finishTest();
        }
    };

    const finishTest = () => {
        const counts = { PSY: 0, PTH: 0, PSYCH: 0, SEX: 0, NAR: 0 };
        Object.values(answers).forEach((code) => {
            counts[code] += 1;
        });

        let res = Object.keys(counts).reduce((a, b) => (counts[a] >= counts[b] ? a : b));

        if (Object.values(answers).includes("NAR")) res = "NAR";
        else if (Object.values(answers).includes("PSYCH") && answers[1] === "PSYCH") res = "PSYCH";
        else if (Object.values(answers).includes("SEX")) res = "SEX";
        else if (Object.values(answers).includes("PTH")) res = "PTH";
        else res = "PSY";

        setResult(res);
    };

    const mapping = {
        PSY: "–ü—Å–∏—Ö–æ–ª–æ–≥ üí¨",
        PTH: "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç üõ†Ô∏è",
        PSYCH: "–ü—Å–∏—Ö–∏–∞—Ç—Ä üíä",
        SEX: "–°–µ–∫—Å–æ–ª–æ–≥ ‚ù§Ô∏è",
        NAR: "–ù–∞—Ä–∫–æ–ª–æ–≥ üö≠",
    };

    return (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
            <div className="bg-white rounded-xl p-8 max-w-lg w-full text-center shadow-xl relative">
                {!result ? (
                    <>
                        <h2 className="text-2xl font-bold mb-4">{tests[0].title}</h2>
                        <div className="space-y-4 text-left">
                            <p className="mb-2 font-medium">
                                {tests[0].questions[currentQuestion].question}
                            </p>
                            <ul className="space-y-2">
                                {tests[0].questions[currentQuestion].answers.map((ans, idx) => (
                                    <li key={idx}>
                                        <button
                                            className={`w-full px-4 py-2 rounded-lg border text-left transition ${
                                                answers[currentQuestion] === ans.code
                                                    ? "bg-[#d5beb0] text-white"
                                                    : "bg-gray-100 hover:bg-gray-200"
                                            }`}
                                            onClick={() => handleAnswer(currentQuestion, ans.code)}
                                        >
                                            {ans.text}
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        </div>

                        <div className="mt-6 flex justify-between">
                            <button
                                className="px-6 py-2 bg-gray-300 rounded-lg hover:bg-gray-400 transition"
                                onClick={onClose}
                            >
                                –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </>
                ) : (
                    <div className="flex flex-col items-center justify-center h-full">
                        <h2 className="text-2xl font-bold mb-4">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>
                        <p className="text-xl mb-6">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {mapping[result]}</p>
                        <button
                            className="px-6 py-2 bg-[#d5beb0] text-white rounded-lg hover:bg-[#7A5240] transition"
                            onClick={onClose}
                        >
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
}
